#summary DTalk messaging protocol is a simple JSON-based messaging protocol designed for working with message-oriented middleware over WebSocket.

= Introduction =

DTalk messaging protocol arose from a need to allow a mobile app developer to access native device services such as the camera or accelerometer from JavaScript as well as device-to-device communication.

Over time DTalk has matured into a protocol which can be used past these simple use cases, but still maintains its core design principles of simplicity and interoperability.

DTalk messaging protocol is similar to [http://www.jsonrpc.org/specification JSON-RPC], based on WebSocket which provides a reliable 2-way streaming network work protocol.

= Details =

The general mechanism consists of two peers establishing a data connection. During the lifetime of a connection, peers may invoke actions provided by the other peer. To invoke a remote action, a request is sent. Unless the request is a notification it must be replied to with a response.

== Request ==

A remote action is requested by sending a request object to a remote service. The request object has the following members:

|| *dtalk* || A string specifying the version of the DTalk protocol (currently "1.0"). ||
|| *service* || A string containing the name of the remote service. ||
|| *action* || A string containing the name of the requested action. ||
|| *params* || A structured value that holds the parameter values to be used during the processing of the requested action. ||
|| *id* || An identifier established by the client that MUST contain a string if included. If 'id' is not included it is assumed to be a notification. Id 'id' is included, the remote service MUST reply with the same value in the response object. ||

== Notification ==

A notification is a special request object without an "id" member. A request object that is a notification signifies the client's lack of interest in the corresponding response object, and as such no response object needs to be returned to the client.

Notifications are not confirmable by definition, since they do not have a response object to be returned. As such, the client would not be aware of any errors.

== Response ==

When the action request completes, the service must reply with a response object. The response is expresses as a single JSON object, with the following members:

|| *dtalk* || A string specifying the version of the DTalk protocol (currently "1.0"). ||
|| *service* || <li>This member is REQUIRED.</li><li>It MUST be the same as the value of the 'id' member in the request object.</li><li>If there was an error in detecting the id in the request object (e.g. parse error) the response is ignored. (???)</li> ||
|| *result* || <li>This member is REQUIRED on success.</li><li>This member MUST NOT exist if there was an error invoking the action.</li><li>The value of this member is determined by the requested action.</li> ||
|| *error* || <li>This member is REQUIRED on error.</li><li>This member MUST NOT exist if there was no error triggered during invocation.</li><li>The value for this member MUST be an object as defined below</li> ||

Either the result member or error member MUST be included, but both members MUST NOT be included.

=== Error Object ===

When a DTalk request encounters an error, the response object MUST contain the error member with a value that is an object with the following members:

|| *code* || A number that indicates the error type that occured.<br>This MUST be an integer. ||
|| *message* || A string providing a short description of the error. ||
|| *data* || A primitive os structured value that contains additional information about the error.<br>This may be omitted.<br>The value of this member is defined by the service (e.g. detailed error information, nested errors etc.). ||

The error codes from and including -32768 to -32000 are reserved for pre-defined errors. Any code within this range, but not defined explicitly below is reserved for future use.

|| *code* || *message* || *meaning* ||
|| -32700 || Parse error || Invalid JSON was received by the service.<br>An error occurred on the server while parsing the JSON text. ||
|| -32600 || Invalid Request || The JSON sent is not a valid request object. ||
|| -32601 || Action not found || The action does not exists / is not available. ||
|| -32602 || Invalid params || Invalid action parameter(s). ||
|| -32603 || Internal error || Internal DTalk error. ||
|| -32000 to -32099 || Server error || Reserved for implementation-defined server-errors. ||

== Examples ==

|| --> || data sent to remote service ||
|| <-- || data sent to client ||