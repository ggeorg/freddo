#summary DTalk is a simple JSON-based messaging protocol designed for working with message-oriented middleware.

= Introduction =

DTalk arose from a need to allow a mobile app developer to access native device services such as the camera or accelerometer from JavaScript as well as device-to-device communication.

Over time DTalk has matured into a protocol which can be used past these simple use cases, but still maintains its core design principles of simplicity and interoperability.

= Details =

DTalk is similar to JSON-RPC.

The general mechanism consists of two peers establishing a data connection. During the lifetime of a connection, peers may invoke actions provided by the other peer. To invoke a remote action, a request is sent. Unless the request is a notification it must be replied to with a response.

== Request ==

A remote action is requested by sending a request object to a remote service. The request object has the following members:

|| *dtalk* || A string specifying the version of the DTalk protocol (currently "1.0"). ||
|| *service* || A string containing the name of the remote service. ||
|| *action* || A string containing the name of the requested action. ||
|| *params* || A structured value that holds the parameter values to be used during the processing of the requested action. ||
|| *id* || An identifier established by the client that MUST contain a string if included. If 'id' is not included it is assumed to be a notification. Id 'id' is included, the remote service MUST reply with the same value in the response object. ||

== Response ==

When the action request completes, the service must reply with a response object. The response is expresses as a single JSON object, with the following members:

|| *dtalk* || A string specifying the version of the DTalk protocol (currently "1.0"). ||
|| *service* || ||
|| *result* || <li>This member is REQUIRED on success.</li><li>This member MUST NOT exist if there was an error invoking the action.</li><li>The value of this member is determined by the requested action.</li> ||
|| *error* || <li>This member is REQUIRED on error.</li><li>This member MUST NOT exist if there was no error triggered during invocation.</li><li>The value for this member MUST be an object as defined below</li> ||